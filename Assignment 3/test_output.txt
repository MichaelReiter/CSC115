In MazeTester.java, I wrote 6 tests to confirm that the functions work as specified by the assignment.

Test 1 calls toString() and checks that it returns an accurate representation of the input Maze.

Test 2 calls solve() on an unsolvable maze and checks that it returns null.

Test 3 calls solve() on a maze that leads straight down and checks that the location list is as expected.

Test 4 calls solve() on a maze that leads down then right then down again and checks that the location list is as expected. This is to confirm that the maze can check alternate directions.

Test 5 calls solve() on a maze with a dead end and checks that the location list is as expected. This is to confirm that dead end paths are properly removed from the location list.

Test 6 calls solve() on a long and complex maze with many turns and dead ends and checks that the location list is as expected (a long list of coordinates of the maze solution path).

Dr. Zastre also included several input and output text files in the assignment (maze01.txt, path01.txt, etc.) for use with RunSolver.java. My implementation solves each of the input mazes and delivering the expected output path.

As for extra work, I implemented an improved version of findPath that randomly chooses the order in which it tries to move, thus unbiasing the solver. It makes use of java.util.Random and java.util.LinkedList and I believe it is worthy of 100%.